// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  role       UserRole @default(TOURIST)
  kycStatus  KycStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  wallet     UserWallet?
  submissions VideoSubmission[]
  cashouts   CashoutRequest[]
  events     SubmissionEvent[] @relation("ActorEvents")

  @@map("users")
}

model UserWallet {
  id           String   @id @default(cuid())
  userId       String   @unique
  pointsBalance Int     @default(0)
  cashBalance  Decimal  @default(0) @db.Decimal(10, 2)
  lockedAmount Decimal  @default(0) @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_wallets")
}

model BinLocation {
  id        String   @id @default(cuid())
  name      String
  lat       Float
  lng       Float
  radiusM   Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  submissions VideoSubmission[]

  @@map("bin_locations")
}

model VideoSubmission {
  id              String            @id @default(cuid())
  userId          String
  s3Key           String
  thumbKey        String?
  durationS       Int
  sizeBytes       BigInt
  deviceHash      String
  gpsLat          Float
  gpsLng          Float
  recordedAt      DateTime
  binIdGuess      String?
  autoScore       Float?
  status          SubmissionStatus  @default(QUEUED)
  rejectionReason String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  binLocation     BinLocation?      @relation(fields: [binIdGuess], references: [id])
  events          SubmissionEvent[]
  cashouts        CashoutRequest[]

  @@map("video_submissions")
}

model SubmissionEvent {
  id           String           @id @default(cuid())
  submissionId String
  actorId      String
  eventType    EventType
  meta         Json?
  createdAt    DateTime         @default(now())

  // Relations
  submission   VideoSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  actor        User             @relation("ActorEvents", fields: [actorId], references: [id])

  @@map("submission_events")
}

model CashoutRequest {
  id              String           @id @default(cuid())
  userId          String
  pointsUsed      Int
  cashAmount      Decimal          @db.Decimal(10, 2)
  method          PayoutMethod
  destinationRef  String
  status          CashoutStatus    @default(PENDING)
  failureReason   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission      VideoSubmission? @relation(fields: [submissionId], references: [id])
  submissionId    String?
  payoutTransactions PayoutTransaction[]

  @@map("cashout_requests")
}

model PayoutTransaction {
  id                String            @id @default(cuid())
  cashoutRequestId  String
  gateway           PaymentGateway
  gatewayTxnId      String?
  status            PayoutStatus      @default(INITIATED)
  rawWebhookJson    Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  cashoutRequest    CashoutRequest    @relation(fields: [cashoutRequestId], references: [id], onDelete: Cascade)

  @@map("payout_transactions")
}

model ReportsCache {
  id           String   @id @default(cuid())
  key          String   @unique
  json         Json
  generatedAt  DateTime @default(now())

  @@map("reports_cache")
}

// Enums
enum UserRole {
  TOURIST
  MODERATOR
  COUNCIL
  FINANCE
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubmissionStatus {
  QUEUED
  AUTO_VERIFIED
  NEEDS_REVIEW
  APPROVED
  REJECTED
}

enum EventType {
  CREATED
  AUTO_VERIFIED
  NEEDS_REVIEW
  APPROVED
  REJECTED
  MODERATED
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH
}

enum CashoutStatus {
  PENDING
  INITIATED
  SUCCEEDED
  FAILED
  CANCELED
}

enum PaymentGateway {
  STRIPE
  PAYPAL
  BANK
}

enum PayoutStatus {
  INITIATED
  PROCESSING
  SUCCEEDED
  FAILED
  NEEDS_INFO
}