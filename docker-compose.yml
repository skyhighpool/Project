version: "3.8"
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address :9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mc alias set local http://minio:9000 minio minio123 &&
      mc mb -p local/waste-videos || true &&
      mc mb -p local/waste-thumbs || true &&
      mc anonymous set download local/waste-thumbs || true"

volumes:
  pgdata:
  redisdata:
  miniodata:
EOF

# Add env example
cat > .env.example <<\"ENV\"
# Database
DATABASE_URL=postgresql://app:app@localhost:5432/appdb

# JWT (fill for real usage)
JWT_SECRET=dev-jwt-secret
JWT_REFRESH_SECRET=dev-refresh-secret

# Redis
REDIS_URL=redis://localhost:6379

# S3/MinIO
S3_ENDPOINT=http://localhost:9000
S3_REGION=us-east-1
S3_ACCESS_KEY=minio
S3_SECRET_KEY=minio123
S3_BUCKET_VIDEOS=waste-videos
S3_BUCKET_THUMBS=waste-thumbs
S3_FORCE_PATH_STYLE=true

# FFmpeg
FFMPEG_PATH=

# Scoring config (optional overrides)
MAX_VIDEO_SIZE_MB=100
MIN_VIDEO_DURATION_SECONDS=10
MAX_VIDEO_DURATION_SECONDS=300
AUTO_APPROVE_THRESHOLD=0.8
AUTO_REJECT_THRESHOLD=0.3
POINTS_PER_APPROVED_SUBMISSION=100
POINTS_TO_CASH_RATE=0.01
MIN_CASHOUT_AMOUNT=5.00
ENV

# Create lib/s3.ts implementation
mkdir -p lib
cat > lib/s3.ts <<\"TS\"
import AWS from aws-sdk

const s3 = new AWS.S3({
  endpoint: process.env.S3_ENDPOINT,
  region: process.env.S3_REGION || us-east-1,
  accessKeyId: process.env.S3_ACCESS_KEY,
  secretAccessKey: process.env.S3_SECRET_KEY,
  s3ForcePathStyle: process.env.S3_FORCE_PATH_STYLE === true
})

export async function uploadVideo(buffer: Buffer, userId: string, fileName: string, metadata?: Record<string, string>) {
  const Bucket = process.env.S3_BUCKET_VIDEOS as string
  const Key = `videos/${userId}/${fileName}`
  await s3
    .putObject({ Bucket, Key, Body: buffer, ContentType: video/mp4, Metadata: metadata })
    .promise()
  return { key: Key, bucket: Bucket }
}

export async function uploadThumbnail(buffer: Buffer, userId: string, submissionId: string) {
  const Bucket = process.env.S3_BUCKET_THUMBS as string
  const Key = `thumbnails/${userId}/${submissionId}.jpg`
  await s3
    .putObject({ Bucket, Key, Body: buffer, ContentType: image/jpeg, CacheControl: public,
